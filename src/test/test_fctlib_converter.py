# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Imports
# ++---------------------------------------------------------------------------------------------------------------------++#
import unittest

from src.fctlib.converter import DictToSet, DictToTuple, TryConvert


# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Unit test for DictToTuple (generated by Cody.AI)
# ++---------------------------------------------------------------------------------------------------------------------++#
class TestDictToTuple(unittest.TestCase):
    def test_none_input(self):
        self.assertEqual(DictToTuple(None), ())

    def test_empty_dict_input(self):
        self.assertEqual(DictToTuple({}), ())

    def test_single_item_dict_input(self):
        input_dict = {"a": 1}
        expected = (("a", 1),)
        self.assertEqual(DictToTuple(input_dict), expected)

    def test_multi_item_dict_input(self):
        input_dict = {"a": 1, "b": 2}
        expected = (("a", 1), ("b", 2))
        self.assertEqual(DictToTuple(input_dict), expected)

    def test_nested_dict_input(self):
        input_dict = {"a": 1, "b": {"c": 2}}
        expected = (("a", 1), ("b", {"c": 2}))
        self.assertEqual(DictToTuple(input_dict), expected)


# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Unit test for DictToSet (generated by Cody.AI)
# ++---------------------------------------------------------------------------------------------------------------------++#
class TestDictToSet(unittest.TestCase):
    def test_none_input(self):
        self.assertEqual(DictToSet(None), set())

    def test_empty_dict_input(self):
        self.assertEqual(DictToSet({}), set())

    def test_string_values(self):
        input_dict = {"a": "hello", "b": "world"}
        expected = {"hello", "world"}
        self.assertEqual(DictToSet(input_dict), expected)

    def test_int_values(self):
        input_dict = {"a": 1, "b": 2}
        expected = {1, 2}
        self.assertEqual(DictToSet(input_dict), expected)

    def test_list_values(self):
        input_dict = {"a": [1, 2], "b": [3, 4]}
        expected = {1, 2, 3, 4}
        self.assertEqual(DictToSet(input_dict), expected)

    def test_set_values(self):
        input_dict = {"a": {1, 2}, "b": {3, 4}}
        expected = {1, 2, 3, 4}
        self.assertEqual(DictToSet(input_dict), expected)

    def test_tuple_values(self):
        input_dict = {"a": (1, 2), "b": (3, 4)}
        expected = {1, 2, 3, 4}
        self.assertEqual(DictToSet(input_dict), expected)

    def test_mixed_values(self):
        input_dict = {"a": [1, 2], "b": "hello", "c": (3, 4)}
        expected = {1, 2, "hello", 3, 4}
        self.assertEqual(DictToSet(input_dict), expected)


# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Unit test for TryConvert (generated by Cody.AI)
# ++---------------------------------------------------------------------------------------------------------------------++#
class TestTryConvert(unittest.TestCase):
    def test_convert_success(self):
        result = TryConvert("1", int)
        self.assertEqual(result, 1)

    def test_convert_failure(self):
        result = TryConvert("abc", int)
        self.assertEqual(result, "abc")

    def test_convert_none(self):
        result = TryConvert(None, str)
        self.assertEqual(result, None)

    def test_convert_custom_type(self):
        class MyClass:
            def __init__(self, val):
                self.val = val

        def to_my_class(x):
            return MyClass(x)

        result = TryConvert(123, to_my_class)
        self.assertEqual(result.val, 123)
