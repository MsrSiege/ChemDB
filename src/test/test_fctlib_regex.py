# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Imports
# ++---------------------------------------------------------------------------------------------------------------------++#
import unittest
from re import compile as reCompile

from src.fctlib.regex import CheckCasNo, GetDelocalisedDecimals, GetGhsStatements


# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Unit test for CheckCasNo (generated by Cody.AI)
# ++---------------------------------------------------------------------------------------------------------------------++#
class TestCheckCasNo(unittest.TestCase):
    def test_valid_cas_number(self):
        self.assertTrue(CheckCasNo("123-45-5"))

    def test_invalid_cas_number(self):
        self.assertFalse(CheckCasNo("123-45-6"))

    def test_invalid_cas_with_spaces(self):
        self.assertFalse(CheckCasNo("123 - 45 - 6"))

    def test_invalid_input(self):
        self.assertFalse(CheckCasNo("abc"))

    def test_cas_number_wrong_length(self):
        self.assertFalse(CheckCasNo("1234"))

    def test_cas_number_wrong_format(self):
        self.assertFalse(CheckCasNo("123-456"))

    def test_cas_number_letters(self):
        self.assertFalse(CheckCasNo("123a-45-6"))

    def test_empty_string(self):
        self.assertFalse(CheckCasNo(""))


# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Unit test for GetDelocalisedDecimals (generated by Cody.AI)
# ++---------------------------------------------------------------------------------------------------------------------++#
class TestRegex(unittest.TestCase):
    def test_GetDelocalisedDecimals_normal(self):
        input_str = "12,345.67"
        expected = "12.345.67"
        actual = GetDelocalisedDecimals(input_str)
        self.assertEqual(expected, actual)

    def test_GetDelocalisedDecimals_no_comma(self):
        input_str = "12345.67"
        expected = "12345.67"
        actual = GetDelocalisedDecimals(input_str)
        self.assertEqual(expected, actual)

    def test_GetDelocalisedDecimals_multiple_commas(self):
        input_str = "12,34,567.89"
        expected = "12.34.567.89"
        actual = GetDelocalisedDecimals(input_str)
        self.assertEqual(expected, actual)

    def test_GetDelocalisedDecimals_no_decimals(self):
        input_str = "1234"
        expected = "1234"
        actual = GetDelocalisedDecimals(input_str)
        self.assertEqual(expected, actual)


# ++---------------------------------------------------------------------------------------------------------------------++#
# ++ Unit test for GetGhsStatements (generated by Cody.AI)
# ++---------------------------------------------------------------------------------------------------------------------++#
repStatement = reCompile(r"H\d{3}(?:\s*\+\s*H\d{3})*")


class TestGetGhsStatements(unittest.TestCase):
    def test_empty_string(self):
        input_str = ""
        expected = ""
        actual = GetGhsStatements(input_str, repStatement)
        self.assertEqual(expected, actual)

    def test_single_match(self):
        input_str = "H302 Harmful if swallowed"
        expected = "H302"
        actual = GetGhsStatements(input_str, repStatement)
        self.assertEqual(expected, actual)

    def test_normal(self):
        input_str = "H302 Harmful if swallowed. H315 Causes skin irritation."
        expected = "H302|H315"
        actual = GetGhsStatements(input_str, repStatement)
        self.assertEqual(expected, actual)

    def test_no_matches(self):
        input_str = "No hazard statements here."
        expected = ""
        actual = GetGhsStatements(input_str, repStatement)
        self.assertEqual(expected, actual)

    def test_duplicate_statements(self):
        input_str = "H302 H302 H315 H315"
        expected = "H302|H315"
        actual = GetGhsStatements(input_str, repStatement)
        self.assertEqual(expected, actual)

    def test_multiple_statements(self):
        input_str = "H302 H315 H400"
        expected = "H302|H315|H400"
        actual = GetGhsStatements(input_str, repStatement)
        self.assertEqual(expected, actual)

    def test_concatenated_statements(self):
        input_str = "H315+H400a aH315+H401 H315+H402 H315 + H400 "
        expected = "H315+H400|H315+H401|H315+H402"
        actual = GetGhsStatements(input_str, repStatement)
        self.assertEqual(expected, actual)
